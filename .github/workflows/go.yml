name: Go build

on:
  push:
    branches:
      - main
      - release-*
    paths-ignore:
      - 'config/**'
      - 'docs/**'
      - 'mkdocs.yml'
      - '**.md'
      - LICENSE
      - '**.svg'
  pull_request:
    branches:
      - main
      - release-*
    paths-ignore:
      - 'config/**'
      - 'docs/**'
      - 'mkdocs.yml'
      - '**.md'
      - LICENSE
      - '**.svg'

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # for `git describe`
          persist-credentials: false

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Build
        run: |
          make build

      - name: Build image
        run: |
          make docker-build

  generate-sbom:
    name: "Build :: SBOM"
    needs: [ build ]

    runs-on: ubuntu-22.04

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Generate SBOM
        run: |
          mkdir -p sbom && chmod 777 sbom
          make sbom/spdx.json

      - uses: actions/upload-artifact@v4
        with:
          name: spdx.json
          path: sbom/spdx.json

  unittest:
    name: Unit test
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Run unit tests
        run: |
          make test

  smoketest:
    name: Smoke test
    needs: build
    runs-on: ubuntu-22.04-8core
    strategy:
      fail-fast: false
      matrix:
        smoke-suite:
          - check-basic
          - check-hostpath
          - check-ha-controller
          - check-ha-controller-secret
          - check-jointoken
          - check-monitoring

    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Create image bundle
        run: |
          make release
          make k0smotron-image-bundle.tar

      - name: Run inttest
        run: |
          make -C inttest ${{ matrix.smoke-suite }}

  capi-smokes:
    name: Cluster API smoke tests
    needs: build
    runs-on: ubuntu-22.04-8core
    strategy:
      fail-fast: false
      matrix:
        smoke-suite:
          - check-capi-docker
          - check-capi-docker-clusterclass
          - check-capi-docker-clusterclass-k0smotron
          - check-capi-docker-machinedeployment
          - check-capi-controlplane-docker
          - check-capi-controlplane-docker-downscaling
          - check-capi-controlplane-docker-tunneling
          - check-capi-controlplane-docker-tunneling-proxy
          - check-capi-controlplane-docker-worker
          - check-capi-remote-machine
          - check-capi-remote-machine-template
          - check-capi-remote-machine-template-update
          - check-capi-docker-machine-template-update
    steps:
      - name: Check out code into the Go module directory
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: Create image bundle
        run: |
          make release
          make k0smotron-image-bundle.tar

      - name: Create kind network with IPv4 only
        run: |
          docker network create kind --opt com.docker.network.bridge.enable_ip_masquerade=true


      - name: Download kind
        uses: supplypike/setup-bin@v3
        with:
          name: kind
          version: v0.20.0
          uri: https://github.com/kubernetes-sigs/kind/releases/download/v0.20.0/kind-linux-amd64

      - name: Setup KinD cluster
        run: |
          kind create cluster --config config/samples/capi/docker/kind.yaml

      - name: Load k0smotron image to KinD and install k0smotron controllers
        run: |
          kind load image-archive k0smotron-image-bundle.tar
          kubectl apply -f install.yaml
      

      - name: Download clusterctl
        uses: supplypike/setup-bin@v3
        with:
          name: clusterctl
          version: v1.4.3
          uri: https://github.com/kubernetes-sigs/cluster-api/releases/download/v1.4.3/clusterctl-linux-amd64

      - name: Install cluster api components
        run: |
          clusterctl init --infrastructure docker
          kubectl patch -n capi-system deployment/capi-controller-manager -p \
            '{"spec":{"template":{"spec":{"containers":[{"name":"manager","args":["--leader-elect", "--metrics-bind-addr=localhost:8080", "--feature-gates=ClusterTopology=true"]}]}}}}'
          kubectl patch -n capd-system deployment/capd-controller-manager -p \
            '{"spec":{"template":{"spec":{"containers":[{"name":"manager","args":["--leader-elect", "--metrics-bind-addr=localhost:8080", "--feature-gates=ClusterTopology=true"]}]}}}}'

      - name: Install PVC provider
        run: |
          kubectl apply -f https://raw.githubusercontent.com/rancher/local-path-provisioner/v0.0.24/deploy/local-path-storage.yaml

      - name: Run inttest for CAPI with docker provider
        run: |
          kind get kubeconfig > kind.conf
          export KUBECONFIG=$(realpath kind.conf)
          docker system prune -f
          make -C inttest ${{ matrix.smoke-suite }}

      - name: Get k0smotron logs
        if: failure()
        run: |
          kubectl logs -n k0smotron deploy/k0smotron-controller-manager > /tmp/${{ matrix.smoke-suite }}-k0smotron.log

      - name: Collect k0s logs and support bundle
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: smoketests-${{ matrix.smoke-suite }}-files
          path: |
            /tmp/${{ matrix.smoke-suite }}-k0smotron.log
